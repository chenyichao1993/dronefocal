// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  brand       String
  model       String
  description String?
  price       Float?
  image       String?
  category    String
  specs       Json?
  rating      Float    @default(0)
  reviewCount Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  reviews     Review[]
  affiliateLinks AffiliateLink[]

  @@map("products")
}

model Review {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  excerpt     String?
  content     String
  rating      Float
  pros        String[]
  cons        String[]
  verdict     String?
  image       String?
  author      String
  publishedAt DateTime @default(now())
  updatedAt   DateTime @updatedAt

  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  comments    Comment[]

  @@map("reviews")
}

model Article {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  excerpt     String?
  content     String
  category    String
  tags        String[]
  image       String?
  author      String
  publishedAt DateTime @default(now())
  updatedAt   DateTime @updatedAt

  comments    Comment[]

  @@map("articles")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comments  Comment[]

  @@map("users")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  rating    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  reviewId  String?
  review    Review?  @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  articleId String?
  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model AffiliateLink {
  id        String   @id @default(cuid())
  platform  String   // amazon, bestbuy, bhphoto, etc.
  url       String
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  clicks    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("affiliate_links")
}


